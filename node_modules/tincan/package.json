{
  "_args": [
    [
      {
        "raw": "tincan",
        "scope": null,
        "escapedName": "tincan",
        "name": "tincan",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Ben/Documents/projects/xapi2"
    ]
  ],
  "_from": "tincan@latest",
  "_id": "tincan@0.2.1",
  "_inCache": true,
  "_location": "/tincan",
  "_npmUser": {
    "name": "danh42",
    "email": "dan@xd6.co"
  },
  "_npmVersion": "1.2.25",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tincan",
    "scope": null,
    "escapedName": "tincan",
    "name": "tincan",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/tincan/-/tincan-0.2.1.tgz",
  "_shasum": "28e3fcd31a35b89d226348c64c6b17b25f7d69b5",
  "_shrinkwrap": null,
  "_spec": "tincan",
  "_where": "/Users/Ben/Documents/projects/xapi2",
  "author": {
    "name": "Dan Hlavenka",
    "email": "dan@xd6.co"
  },
  "bugs": {
    "url": "https://github.com/DanH42/tincan-nodejs/issues"
  },
  "dependencies": {},
  "description": "Read and write data using the tincan.me API",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "28e3fcd31a35b89d226348c64c6b17b25f7d69b5",
    "tarball": "https://registry.npmjs.org/tincan/-/tincan-0.2.1.tgz"
  },
  "engines": {
    "node": ">=0.4"
  },
  "homepage": "https://github.com/DanH42/tincan-nodejs#readme",
  "license": "MIT",
  "main": "./tincan.js",
  "maintainers": [
    {
      "name": "danh42",
      "email": "dan@xd6.co"
    }
  ],
  "name": "tincan",
  "optionalDependencies": {},
  "readme": "tincan-nodejs\n=============\n\nA thin wrapper for reading and writing data using the tincan.me API using Node.JS\n\nInstallation\n------------\n\nTo install from NPM, use `npm install tincan`\n\nSetup\n-----\n\nTo use this package, you'll need a TinCan developer account (currently invite-only). Once you've got one, supply your credentials like so:\n\n    var tincan = require(\"tincan\");\n    var myApp = new tincan(\"example\", \"5e6a7e38c97b\", \"81aca0b3a200dd52bda8bca268ee68a8\");\n\nIn this case, the application is named `\"example\"`, the app ID is `5e6a7e38c97b`, and its key is `81aca0b3a200dd52bda8bca268ee68a8`.\n\nOnce you've done that, a request will be made asynchronously to validate your credentials with the server. If anything goes wrong, an error will be thrown. The constructor also takes an optional fourth callback parameter that gives a single  `error` argument, called once the API is ready. In the event of an error, the callback will be called immediately before the error is thrown, and will contain the error message. However, assuming there are no problems, you can use the API immediately, even before the callback fires.\n\nUsage\n-----\n\nFor a more in-depth description of these functions, check the official documentation at http://apps.tincan.me/\n\nTheir syntax is as follows:\n\n- `tincan.find([query], callback)`\n- `tincan.insert(query, [callback])`\n- `tincan.remove(query, [callback])`\n- `tincan.update(search, query, [callback])`\n- `tincan.user(query, callback)`\n\nAll queries can be either objects or JSON-encoded strings (which will be passed along as-is). Callbacks follow the standard format of `(err, data)`.\n\nExample\n-------\n\n    // Initialize the API\n    var tincan = require(\"tincan\");\n    var myApp = new tincan(\"example\", \"5e6a7e38c97b\", \"81aca0b3a200dd52bda8bca268ee68a8\");\n    \n    // Look up a user\n    myApp.user({token: \"29e39a4c-3c43-493f-ba35-d3a747b3d83d\"}, function(err, user{\n    \tif(!err && user){\n    \t\t// Insert some data\n    \t\tmyApp.insert({name: user.name, image: user.avatar, age: 37, online: true});\n    \t}else\n    \t\tconsole.log(\"User is not logged in\");\n    }));\n    \n    // Fetch all online users\n    // NOTE: The above call was asynchronous, so it probably won't have completed yet.\n    myApp.find({online: true}, function(err, users){\n    \tif(!err && users){\n    \t\tfor(var i in users)\n    \t\t\tconsole.log(users[i].name);\n    \t}else\n    \t\tthrow new Error(err);\n    });\n    \n    // Change some data\n    myApp.update({name: \"John Mitchell\"}, {$set: {online: false}});\n    \n    // Remove a document\n    myApp.remove({name: \"John Mitchell\"});\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/DanH42/tincan-nodejs.git"
  },
  "version": "0.2.1"
}
